// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model users {
    id        Int       @id @default(autoincrement())
    firstName String?
    lastName  String?
    email     String    @unique
    password  String
    username  String?   @unique
    roles     String[]
    tokens    String[]
    lastLogin DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model verification_codes {
    id         Int      @id @default(autoincrement())
    email      String   @unique
    expiration DateTime
    code       String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

// League 
model leagues {
    id                   Int                    @id @default(autoincrement())
    leagueName           String
    leaguesGroups        leaguesGroups[]
}

model leaguesGroups {
    id                   Int                    @id @default(autoincrement())
    groupIdentifier            String
    matchSchedule        matchSchedule[]
    classificationPoints classificationPoints[]
    playersGroup         playersGroup[]
    results              results[]
    leagues              leagues?               @relation(fields: [leaguesId], references: [id])
    leaguesId            Int?
}

// Takim listeleri

model playersGroup {
    id              Int            @id @default(autoincrement())
    identifierGroup String
    players         players[]
    leaguesGroups   leaguesGroups? @relation(fields: [leaguesGroupsId], references: [id])
    leaguesGroupsId Int?
}

model players {
    id             Int           @id @default(autoincrement())
    playerName     String
    categories     String
    playersGroup   playersGroup? @relation(fields: [playersGroupId], references: [id])
    playersGroupId Int?
}

// KLASMAN PUANLARI
model classificationPoints {
    id                        Int                         @id @default(autoincrement())
    identifierName            String
    classificationPointsTable classificationPointsTable[]
    leaguesGroups             leaguesGroups?              @relation(fields: [leaguesGroupsId], references: [id])
    leaguesGroupsId           Int?
}

model classificationPointsTable {
    id                     Int                   @id @default(autoincrement())
    gender                 String
    fullname               String
    category               String
    point                  Int
    classificationPoints   classificationPoints? @relation(fields: [classificationPointsId], references: [id])
    classificationPointsId Int?
}

// MAÇ PROGRAMI
model matchSchedule {
    id               Int            @id @default(autoincrement())
    date             DateTime
    day              String
    hour             String
    team1            String
    team2            String
    team1MatchResult Int?
    team2MatchResult Int?
    results          results[]
    leaguesGroups    leaguesGroups? @relation(fields: [leaguesGroupsId], references: [id])
    leaguesGroupsId  Int?
}

// A PLAY OFF

model playoff {
    id             Int            @id @default(autoincrement())
    identifierName String
    playoffNumber  Int
    playoffTable   playoffTable[]
}

model playoffTable {
    id        Int      @id @default(autoincrement())
    team      String
    result    Float
    playoff   playoff? @relation(fields: [playoffId], references: [id])
    playoffId Int?
}

// SONUÇLARI

model results {
    id              Int            @id @default(autoincrement())
    identifierName  String
    date            DateTime
    matches         matches[]

    matchSchedule   matchSchedule? @relation(fields: [matchScheduleId], references: [id])
    matchScheduleId Int?
    leaguesGroups   leaguesGroups? @relation(fields: [leaguesGroupsId], references: [id])
    leaguesGroupsId Int?
}

model matches {
    id        Int      @id @default(autoincrement())
    hour      String
    matchCode String
    team1     team1[]
    results   results? @relation(fields: [resultsId], references: [id])
    resultsId Int?
    team2     team2[]
}

model team1 {
    id         Int      @id @default(autoincrement())
    teamCode   String
    teamName   String
    set1       Int
    set2       Int
    set3       Int
    matchScore Int
    matchPoint Int
    teamPoint  Int
    players    player[]
    matches    matches? @relation(fields: [matchesId], references: [id])
    matchesId  Int?
}

model team2 {
    id         Int      @id @default(autoincrement())
    teamCode   String
    teamName   String
    set1       Int
    set2       Int
    set3       Int
    matchScore Int
    matchPoint Int
    teamPoint  Int
    players    player[]
    matches    matches? @relation(fields: [matchesId], references: [id])
    matchesId  Int?
}

model player {
    id         Int    @id @default(autoincrement())
    playerName String
    categorie  String
    team1      team1? @relation(fields: [team1Id], references: [id])
    team1Id    Int?
    team2      team2? @relation(fields: [team2Id], references: [id])
    team2Id    Int?
}
